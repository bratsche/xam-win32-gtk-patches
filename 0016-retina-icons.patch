diff --git a/gdk/gdkcairo.c b/gdk/gdkcairo.c
index 2ad77d1..274a122 100644
--- a/gdk/gdkcairo.c
+++ b/gdk/gdkcairo.c
@@ -23,6 +23,8 @@
 #include "gdkregion-generic.h"
 #include "gdkalias.h"
 
+static const cairo_user_data_key_t gdk_cairo_drawable_pointer;
+
 static void
 gdk_ensure_surface_flush (gpointer surface)
 {
@@ -58,6 +60,7 @@ gdk_cairo_create (GdkDrawable *drawable)
 
   surface = _gdk_drawable_ref_cairo_surface (drawable);
   cr = cairo_create (surface);
+  cairo_set_user_data (cr, &gdk_cairo_drawable_pointer, drawable, NULL);
 
   if (GDK_DRAWABLE_GET_CLASS (drawable)->set_cairo_clip)
     GDK_DRAWABLE_GET_CLASS (drawable)->set_cairo_clip (drawable, cr);
@@ -202,7 +205,32 @@ gdk_cairo_set_source_pixbuf (cairo_t         *cr,
   cairo_format_t format;
   cairo_surface_t *surface;
   static const cairo_user_data_key_t key;
-  int j;
+  GdkWindow *window;
+  cairo_pattern_t *pattern;
+  cairo_matrix_t matrix;
+  int j, scale = 1;
+
+  window = cairo_get_user_data (cr, &gdk_cairo_drawable_pointer);
+
+  if (window &&
+      (int) gdk_window_get_scale_factor (window) == 2)
+    {
+      GdkPixbuf *scaled_pixbuf;
+
+      scaled_pixbuf = g_object_get_data (G_OBJECT (pixbuf),
+                                         "gdk-pixbuf-2x-variant");
+      if (scaled_pixbuf)
+        {
+          scale = 2;
+          pixbuf = scaled_pixbuf;
+        }
+    }
+
+  width = gdk_pixbuf_get_width (pixbuf);
+  height = gdk_pixbuf_get_height (pixbuf);
+  gdk_pixels = gdk_pixbuf_get_pixels (pixbuf);
+  gdk_rowstride = gdk_pixbuf_get_rowstride (pixbuf);
+  n_channels = gdk_pixbuf_get_n_channels (pixbuf);
 
   if (n_channels == 3)
     format = CAIRO_FORMAT_RGB24;
@@ -274,7 +302,11 @@ gdk_cairo_set_source_pixbuf (cairo_t         *cr,
       cairo_pixels += cairo_stride;
     }
 
-  cairo_set_source_surface (cr, surface, pixbuf_x, pixbuf_y);
+  cairo_set_source_surface (cr, surface, 0, 0);
+  pattern = cairo_get_source (cr);
+  cairo_matrix_init_scale (&matrix, scale, scale);
+  cairo_matrix_translate (&matrix, -pixbuf_x, -pixbuf_y);
+  cairo_pattern_set_matrix (pattern, &matrix);
   cairo_surface_destroy (surface);
 }
 
diff --git a/gdk/gdkdraw.c b/gdk/gdkdraw.c
index 932de97..6ebd8c7 100644
--- a/gdk/gdkdraw.c
+++ b/gdk/gdkdraw.c
@@ -819,6 +819,8 @@ gdk_draw_pixbuf (GdkDrawable     *drawable,
                  gint             x_dither,
                  gint             y_dither)
 {
+  GdkPixbuf *scaled_pixbuf;
+
   g_return_if_fail (GDK_IS_DRAWABLE (drawable));
   g_return_if_fail (gc == NULL || GDK_IS_GC (gc));
   g_return_if_fail (GDK_IS_PIXBUF (pixbuf));
@@ -826,6 +828,22 @@ gdk_draw_pixbuf (GdkDrawable     *drawable,
   if (width == 0 || height == 0)
     return;
 
+  scaled_pixbuf = g_object_get_data (G_OBJECT (pixbuf),
+                                     "gdk-pixbuf-2x-variant");
+
+  if (scaled_pixbuf && GDK_IS_WINDOW (drawable) &&
+      (int) gdk_window_get_scale_factor (GDK_WINDOW (drawable)) == 2)
+    {
+      cairo_t *cr;
+
+      cr = gdk_cairo_create (GDK_WINDOW (drawable));
+      gdk_cairo_set_source_pixbuf (cr, pixbuf, dest_x, dest_y);
+      cairo_paint (cr);
+
+      cairo_destroy (cr);
+      return;
+    }
+
   if (width == -1)
     width = gdk_pixbuf_get_width (pixbuf);
   if (height == -1)
diff --git a/gdk/gdkscreen.h b/gdk/gdkscreen.h
index 418cecf..1472d6f 100644
--- a/gdk/gdkscreen.h
+++ b/gdk/gdkscreen.h
@@ -106,6 +106,8 @@ gint          gdk_screen_get_monitor_height_mm (GdkScreen *screen,
                                                 gint       monitor_num);
 gchar *       gdk_screen_get_monitor_plug_name (GdkScreen *screen,
                                                 gint       monitor_num);
+gdouble       gdk_screen_get_monitor_scale_factor (GdkScreen *screen,
+                                                   gint       monitor_num);
 
 void          gdk_screen_broadcast_client_message  (GdkScreen       *screen,
 						    GdkEvent        *event);
diff --git a/gdk/gdkwindow.c b/gdk/gdkwindow.c
index f5f0339..ad93823 100644
--- a/gdk/gdkwindow.c
+++ b/gdk/gdkwindow.c
@@ -11342,6 +11342,30 @@ gdk_window_get_height (GdkWindow *window)
   return height;
 }
 
+gdouble
+gdk_window_get_scale_factor (GdkWindow *window)
+{
+  GdkWindowObject *private;
+  GdkWindowImplIface *impl_iface;
+
+  g_return_val_if_fail (GDK_IS_WINDOW (window), 1.0);
+
+  private = (GdkWindowObject *) window;
+  if (private->destroyed)
+    return 1.0;
+
+  window = gdk_window_get_toplevel (window);
+
+  if (gdk_window_has_impl (private))
+    {
+      impl_iface = GDK_WINDOW_IMPL_GET_IFACE (private->impl);
+
+      if (impl_iface->get_scale_factor)
+        return impl_iface->get_scale_factor (window);
+    }
+
+  return 1.0;
+}
 
 #define __GDK_WINDOW_C__
 #include "gdkaliasdef.c"
diff --git a/gdk/gdkwindow.h b/gdk/gdkwindow.h
index 572797b..95a3665 100644
--- a/gdk/gdkwindow.h
+++ b/gdk/gdkwindow.h
@@ -341,6 +341,7 @@ GdkDisplay*   gdk_window_get_display           (GdkWindow     *window);
 GdkVisual*    gdk_window_get_visual            (GdkWindow     *window);
 int           gdk_window_get_width             (GdkWindow     *window);
 int           gdk_window_get_height            (GdkWindow     *window);
+gdouble       gdk_window_get_scale_factor      (GdkWindow     *window);
 
 GdkWindow*    gdk_window_at_pointer            (gint          *win_x,
                                                 gint          *win_y);
diff --git a/gdk/gdkwindowimpl.h b/gdk/gdkwindowimpl.h
index 3a5029b..d6a0c89 100644
--- a/gdk/gdkwindowimpl.h
+++ b/gdk/gdkwindowimpl.h
@@ -146,6 +146,9 @@ struct _GdkWindowImplIface
   void         (* input_window_destroy) (GdkWindow       *window);
   void         (* input_window_crossing)(GdkWindow       *window,
 					 gboolean         enter);
+
+  gdouble      (* get_scale_factor)     (GdkWindow       *window);
+
   gboolean     supports_native_bg;
 };
 
diff --git a/gdk/quartz/gdkscreen-quartz.c b/gdk/quartz/gdkscreen-quartz.c
index 796fcb5..f7debd7 100644
--- a/gdk/quartz/gdkscreen-quartz.c
+++ b/gdk/quartz/gdkscreen-quartz.c
@@ -464,6 +464,39 @@ gdk_screen_get_monitor_geometry (GdkScreen    *screen,
   *dest = GDK_SCREEN_QUARTZ (screen)->screen_rects[monitor_num];
 }
 
+/* Protocol to build cleanly for OSX < 10.7 */
+@protocol ScaleFactor
+- (CGFloat) backingScaleFactor;
+@end
+
+gdouble
+gdk_screen_get_monitor_scale_factor (GdkScreen *screen,
+                                     gint       monitor_num)
+{
+  GdkScreenQuartz *quartz_screen;
+  NSArray *array;
+  NSScreen *nsscreen;
+  gdouble scale_factor = 1.0;
+
+  g_return_val_if_fail (GDK_IS_SCREEN (screen), 1.0);
+  g_return_val_if_fail (monitor_num < gdk_screen_get_n_monitors (screen), 1.0);
+  g_return_val_if_fail (monitor_num >= 0, 1.0);
+
+  quartz_screen = GDK_SCREEN_QUARTZ (screen);
+
+  GDK_QUARTZ_ALLOC_POOL;
+
+  array = [NSScreen screens];
+  nsscreen = [array objectAtIndex:monitor_num];
+
+  if (gdk_quartz_osx_version() >= GDK_OSX_LION)
+    scale_factor = [(id <ScaleFactor>) nsscreen backingScaleFactor];
+
+  GDK_QUARTZ_RELEASE_POOL;
+
+  return scale_factor;
+}
+
 gchar *
 gdk_screen_make_display_name (GdkScreen *screen)
 {
diff --git a/gdk/quartz/gdkwindow-quartz.c b/gdk/quartz/gdkwindow-quartz.c
index 318a171..ab48366 100644
--- a/gdk/quartz/gdkwindow-quartz.c
+++ b/gdk/quartz/gdkwindow-quartz.c
@@ -3185,6 +3185,27 @@ _gdk_windowing_window_get_input_shape (GdkWindow *window)
   return NULL;
 }
 
+/* Protocol to build cleanly for OSX < 10.7 */
+@protocol ScaleFactor
+- (CGFloat) backingScaleFactor;
+@end
+
+static gdouble
+gdk_window_quartz_get_scale_factor (GdkWindow *window)
+{
+  GdkWindowImplQuartz *impl;
+
+  if (GDK_WINDOW_DESTROYED (window))
+    return 1.0;
+
+  impl = GDK_WINDOW_IMPL_QUARTZ (GDK_WINDOW_OBJECT (window)->impl);
+
+  if (gdk_quartz_osx_version() >= GDK_OSX_LION)
+    return [(id <ScaleFactor>) impl->toplevel backingScaleFactor];
+
+  return 1.0;
+}
+
 static void
 gdk_window_impl_iface_init (GdkWindowImplIface *iface)
 {
@@ -3213,4 +3234,5 @@ gdk_window_impl_iface_init (GdkWindowImplIface *iface)
   iface->destroy = _gdk_quartz_window_destroy;
   iface->input_window_destroy = _gdk_input_window_destroy;
   iface->input_window_crossing = _gdk_input_window_crossing;
+  iface->get_scale_factor = gdk_window_quartz_get_scale_factor;
 }
diff --git a/gdk/x11/gdkscreen-x11.c b/gdk/x11/gdkscreen-x11.c
index 66a0d96..d09d0b6 100644
--- a/gdk/x11/gdkscreen-x11.c
+++ b/gdk/x11/gdkscreen-x11.c
@@ -454,6 +454,13 @@ gdk_screen_get_monitor_plug_name (GdkScreen *screen,
   return g_strdup (screen_x11->monitors[monitor_num].output_name);
 }
 
+gdouble
+gdk_screen_get_monitor_scale_factor (GdkScreen *screen,
+                                     gint       monitor_num)
+{
+  return 1.0;
+}
+
 /**
  * gdk_x11_screen_get_monitor_output:
  * @screen: a #GdkScreen
diff --git a/gtk/gtkcellrendererpixbuf.c b/gtk/gtkcellrendererpixbuf.c
index f689784..5969792 100644
--- a/gtk/gtkcellrendererpixbuf.c
+++ b/gtk/gtkcellrendererpixbuf.c
@@ -63,7 +63,8 @@ enum {
   PROP_STOCK_DETAIL,
   PROP_FOLLOW_STATE,
   PROP_ICON_NAME,
-  PROP_GICON
+  PROP_GICON,
+  PROP_ICON_SET
 };
 
 
@@ -78,6 +79,8 @@ struct _GtkCellRendererPixbufPrivate
   gboolean follow_state;
   gchar *icon_name;
   GIcon *gicon;
+  GtkIconSet *icon_set;
+  gdouble render_scale;
 };
 
 G_DEFINE_TYPE (GtkCellRendererPixbuf, gtk_cell_renderer_pixbuf, GTK_TYPE_CELL_RENDERER)
@@ -173,6 +176,14 @@ gtk_cell_renderer_pixbuf_class_init (GtkCellRendererPixbufClass *class)
 							NULL,
 							GTK_PARAM_READWRITE));
 
+  g_object_class_install_property (object_class,
+                                   PROP_ICON_SET,
+                                   g_param_spec_boxed ("icon-set",
+                                                       P_("Icon set"),
+                                                       P_("Icon set to render the image from"),
+                                                       GTK_TYPE_ICON_SET,
+                                                       GTK_PARAM_READWRITE));
+
   /**
    * GtkCellRendererPixbuf:follow-state:
    *
@@ -277,6 +288,9 @@ gtk_cell_renderer_pixbuf_get_property (GObject        *object,
     case PROP_GICON:
       g_value_set_object (value, priv->gicon);
       break;
+    case PROP_ICON_SET:
+      g_value_set_boxed (value, priv->icon_set);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
       break;
@@ -300,6 +314,7 @@ gtk_cell_renderer_pixbuf_set_property (GObject      *object,
       if (cellpixbuf->pixbuf)
 	g_object_unref (cellpixbuf->pixbuf);
       cellpixbuf->pixbuf = (GdkPixbuf*) g_value_dup_object (value);
+      priv->render_scale = 1;
       if (cellpixbuf->pixbuf)
         {
           if (priv->stock_id)
@@ -422,6 +437,7 @@ gtk_cell_renderer_pixbuf_set_property (GObject      *object,
 	  g_object_unref (priv->gicon);
 	}
       priv->gicon = (GIcon *) g_value_dup_object (value);
+      priv->render_scale = 1;
       if (priv->gicon)
         {
 	  if (cellpixbuf->pixbuf)
@@ -444,6 +460,49 @@ gtk_cell_renderer_pixbuf_set_property (GObject      *object,
             }
         }
       break;
+    case PROP_ICON_SET:
+      if (priv->icon_set)
+	{
+	  if (cellpixbuf->pixbuf)
+	    {
+	      g_object_unref (cellpixbuf->pixbuf);
+	      cellpixbuf->pixbuf = NULL;
+              g_object_notify (object, "pixbuf");
+	    }
+
+          gtk_icon_set_unref (priv->icon_set);
+	}
+
+      priv->icon_set = g_value_dup_boxed (value);
+
+      if (priv->icon_set)
+        {
+	  if (cellpixbuf->pixbuf)
+	    {
+              g_object_unref (cellpixbuf->pixbuf);
+              cellpixbuf->pixbuf = NULL;
+              g_object_notify (object, "pixbuf");
+	    }
+          if (priv->stock_id)
+            {
+              g_free (priv->stock_id);
+              priv->stock_id = NULL;
+              g_object_notify (object, "stock-id");
+            }
+          if (priv->icon_name)
+            {
+              g_free (priv->icon_name);
+              priv->icon_name = NULL;
+              g_object_notify (object, "icon-name");
+            }
+          if (priv->gicon)
+            {
+              g_object_unref (priv->gicon);
+              priv->gicon = NULL;
+              g_object_notify (object, "gicon");
+            }
+        }
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
       break;
@@ -474,16 +533,19 @@ gtk_cell_renderer_pixbuf_create_stock_pixbuf (GtkCellRendererPixbuf *cellpixbuf,
                                               GtkWidget             *widget)
 {
   GtkCellRendererPixbufPrivate *priv;
+  GtkIconSet *icon_set;
 
   priv = GTK_CELL_RENDERER_PIXBUF_GET_PRIVATE (cellpixbuf);
 
   if (cellpixbuf->pixbuf)
     g_object_unref (cellpixbuf->pixbuf);
 
-  cellpixbuf->pixbuf = gtk_widget_render_icon (widget,
-                                               priv->stock_id,
-                                               priv->stock_size,
-                                               priv->stock_detail);
+  priv->render_scale = gtk_widget_get_scale_factor (widget);
+  cellpixbuf->pixbuf = gtk_widget_render_icon_scaled (widget,
+                                                      priv->stock_id,
+                                                      priv->stock_size,
+                                                      priv->stock_detail,
+                                                      &priv->render_scale);
 
   g_object_notify (G_OBJECT (cellpixbuf), "pixbuf");
 }
@@ -510,15 +572,24 @@ gtk_cell_renderer_pixbuf_create_themed_pixbuf (GtkCellRendererPixbuf *cellpixbuf
   icon_theme = gtk_icon_theme_get_for_screen (screen);
   settings = gtk_settings_get_for_screen (screen);
 
-  if (!gtk_icon_size_lookup_for_settings (settings,
-					  priv->stock_size,
-					  &width, &height))
+  if (!gtk_icon_size_lookup_scaled (settings,
+                                    priv->stock_size,
+                                    gdk_window_get_scale_factor (GTK_WIDGET (widget)->window),
+                                    &width, &height))
     {
       g_warning ("Invalid icon size %u\n", priv->stock_size);
       width = height = 24;
     }
 
-  if (priv->icon_name)
+  if (priv->icon_set)
+    cellpixbuf->pixbuf =
+      gtk_icon_set_render_icon_scaled (priv->icon_set,
+                                       widget->style,
+                                       gtk_widget_get_direction (widget),
+                                       gtk_widget_get_state (widget),
+                                       priv->stock_size, widget,
+                                       NULL, &priv->render_scale);
+  else if (priv->icon_name)
     cellpixbuf->pixbuf = gtk_icon_theme_load_icon (icon_theme,
 			                           priv->icon_name,
 			                           MIN (width, height), 
@@ -543,8 +614,8 @@ gtk_cell_renderer_pixbuf_create_themed_pixbuf (GtkCellRendererPixbuf *cellpixbuf
 }
 
 static GdkPixbuf *
-create_colorized_pixbuf (GdkPixbuf *src, 
-			 GdkColor  *new_color)
+create_colorized_pixbuf_single (GdkPixbuf *src, 
+				GdkColor  *new_color)
 {
   gint i, j;
   gint width, height, has_alpha, src_row_stride, dst_row_stride;
@@ -588,6 +659,28 @@ create_colorized_pixbuf (GdkPixbuf *src,
   return dest;
 }
 
+static GdkPixbuf *
+create_colorized_pixbuf (GdkPixbuf *src,
+			 GdkColor  *new_color)
+{
+  GdkPixbuf *colorized, *variant, *colorized_variant;
+
+  colorized = create_colorized_pixbuf_single (src, new_color);
+
+  variant = g_object_get_data (G_OBJECT (src),
+                               "gdk-pixbuf-2x-variant");
+
+  if (colorized && variant)
+    {
+      colorized_variant = create_colorized_pixbuf_single (variant, new_color);
+      g_object_set_data_full (G_OBJECT (colorized),
+                              "gdk-pixbuf-2x-variant",
+                              colorized_variant,
+                              (GDestroyNotify) g_object_unref);
+    }
+
+  return colorized;
+}
 
 static void
 gtk_cell_renderer_pixbuf_get_size (GtkCellRenderer *cell,
@@ -611,14 +704,28 @@ gtk_cell_renderer_pixbuf_get_size (GtkCellRenderer *cell,
     {
       if (priv->stock_id)
 	gtk_cell_renderer_pixbuf_create_stock_pixbuf (cellpixbuf, widget);
+      else if (priv->icon_set)
+        {
+          gdouble scale;
+
+          scale = gtk_widget_get_scale_factor (widget);
+          cellpixbuf->pixbuf =
+            gtk_icon_set_render_icon_scaled (priv->icon_set,
+                                             widget->style,
+                                             gtk_widget_get_direction (widget),
+                                             gtk_widget_get_state (widget),
+                                             priv->stock_size,
+                                             widget, priv->stock_detail,
+                                             &scale);
+        }
       else if (priv->icon_name || priv->gicon)
 	gtk_cell_renderer_pixbuf_create_themed_pixbuf (cellpixbuf, widget);
     }
   
   if (cellpixbuf->pixbuf)
     {
-      pixbuf_width  = gdk_pixbuf_get_width (cellpixbuf->pixbuf);
-      pixbuf_height = gdk_pixbuf_get_height (cellpixbuf->pixbuf);
+      pixbuf_width  = gdk_pixbuf_get_width (cellpixbuf->pixbuf) / priv->render_scale;
+      pixbuf_height = gdk_pixbuf_get_height (cellpixbuf->pixbuf) / priv->render_scale;
     }
   if (cellpixbuf->pixbuf_expander_open)
     {
@@ -761,10 +868,14 @@ gtk_cell_renderer_pixbuf_render (GtkCellRenderer      *cell,
       pixbuf = colorized;
     }
 
+  draw_rect.x -= pix_rect.x;
+  draw_rect.y -= pix_rect.y;
+
   cr = gdk_cairo_create (window);
-  
-  gdk_cairo_set_source_pixbuf (cr, pixbuf, pix_rect.x, pix_rect.y);
+  cairo_translate (cr, pix_rect.x, pix_rect.y);
   gdk_cairo_rectangle (cr, &draw_rect);
+  cairo_scale (cr, 1 / priv->render_scale, 1 / priv->render_scale);
+  gdk_cairo_set_source_pixbuf (cr, pixbuf, 0, 0);
   cairo_fill (cr);
 
   cairo_destroy (cr);
diff --git a/gtk/gtkentry.c b/gtk/gtkentry.c
index e2999a3..dfe0a9e 100644
--- a/gtk/gtkentry.c
+++ b/gtk/gtkentry.c
@@ -105,9 +105,11 @@ typedef struct
   gchar        *stock_id;
   gchar        *icon_name;
   GIcon        *gicon;
+  GtkIconSet   *icon_set;
 
   GtkTargetList *target_list;
   GdkDragAction actions;
+  gdouble render_scale;
 } EntryIconInfo;
 
 struct _GtkEntryPrivate 
@@ -207,6 +209,8 @@ enum {
   PROP_ICON_NAME_SECONDARY,
   PROP_GICON_PRIMARY,
   PROP_GICON_SECONDARY,
+  PROP_ICON_SET_PRIMARY,
+  PROP_ICON_SET_SECONDARY,
   PROP_STORAGE_TYPE_PRIMARY,
   PROP_STORAGE_TYPE_SECONDARY,
   PROP_ACTIVATABLE_PRIMARY,
@@ -1009,7 +1013,21 @@ gtk_entry_class_init (GtkEntryClass *class)
                                                         P_("GIcon for secondary icon"),
                                                         G_TYPE_ICON,
                                                         GTK_PARAM_READWRITE));
-  
+  g_object_class_install_property (gobject_class,
+                                   PROP_ICON_SET_PRIMARY,
+                                   g_param_spec_boxed ("primary-icon-set",
+                                                       P_("Primary icon set"),
+                                                       P_("GtkIconSet for the primary icon"),
+                                                       GTK_TYPE_ICON_SET,
+                                                       GTK_PARAM_READWRITE));
+  g_object_class_install_property (gobject_class,
+                                   PROP_ICON_SET_SECONDARY,
+                                   g_param_spec_boxed ("secondary-icon-set",
+                                                       P_("Secondary icon set"),
+                                                       P_("GtkIconSet for the secondary icon"),
+                                                       GTK_TYPE_ICON_SET,
+                                                       GTK_PARAM_READWRITE));
+
   /**
    * GtkEntry:primary-icon-storage-type:
    *
@@ -1940,6 +1958,18 @@ gtk_entry_set_property (GObject         *object,
                                      g_value_get_object (value));
       break;
 
+    case PROP_ICON_SET_PRIMARY:
+      gtk_entry_set_icon_from_icon_set (entry,
+                                        GTK_ENTRY_ICON_PRIMARY,
+                                        g_value_get_boxed (value));
+      break;
+
+    case PROP_ICON_SET_SECONDARY:
+      gtk_entry_set_icon_from_icon_set (entry,
+                                        GTK_ENTRY_ICON_SECONDARY,
+                                        g_value_get_boxed (value));
+      break;
+
     case PROP_ACTIVATABLE_PRIMARY:
       gtk_entry_set_icon_activatable (entry,
                                       GTK_ENTRY_ICON_PRIMARY,
@@ -2158,6 +2188,18 @@ gtk_entry_get_property (GObject         *object,
                                                     GTK_ENTRY_ICON_SECONDARY));
       break;
 
+    case PROP_ICON_SET_PRIMARY:
+      g_value_set_boxed (value,
+                         gtk_entry_get_icon_set (entry,
+                                                 GTK_ENTRY_ICON_PRIMARY));
+      break;
+
+    case PROP_ICON_SET_SECONDARY:
+      g_value_set_boxed (value,
+                         gtk_entry_get_icon_set (entry,
+                                                 GTK_ENTRY_ICON_SECONDARY));
+      break;
+
     case PROP_STORAGE_TYPE_PRIMARY:
       g_value_set_enum (value,
                         gtk_entry_get_icon_storage_type (entry, 
@@ -2334,7 +2376,9 @@ get_icon_width (GtkEntry             *entry,
   gtk_icon_size_lookup_for_settings (settings, GTK_ICON_SIZE_MENU,
                                      &menu_icon_width, NULL);
 
-  return MAX (gdk_pixbuf_get_width (icon_info->pixbuf), menu_icon_width);
+  return MAX (gdk_pixbuf_get_width (icon_info->pixbuf) /
+              gtk_widget_get_scale_factor (GTK_WIDGET (entry)),
+              menu_icon_width);
 }
 
 static void
@@ -3188,6 +3232,7 @@ draw_icon (GtkWidget            *widget,
   EntryIconInfo *icon_info = priv->icons[icon_pos];
   GdkPixbuf *pixbuf;
   gint x, y, width, height;
+  gdouble window_scale;
   cairo_t *cr;
 
   if (!icon_info)
@@ -3198,8 +3243,9 @@ draw_icon (GtkWidget            *widget,
   if (icon_info->pixbuf == NULL)
     return;
 
-  width = gdk_window_get_width (icon_info->window);
-  height = gdk_window_get_height (icon_info->window);
+  window_scale = gdk_window_get_scale_factor (widget->window);
+  width = gdk_window_get_width (icon_info->window) / window_scale;
+  height = gdk_window_get_height (icon_info->window) / window_scale;
 
   /* size_allocate hasn't been called yet. These are the default values.
    */
@@ -3209,20 +3255,20 @@ draw_icon (GtkWidget            *widget,
   pixbuf = icon_info->pixbuf;
   g_object_ref (pixbuf);
 
-  if (gdk_pixbuf_get_height (pixbuf) > height)
+  if (gdk_pixbuf_get_height (pixbuf) > (height * window_scale))
     {
       GdkPixbuf *temp_pixbuf;
       gint scale;
 
-      scale = height - 2 * priv->icon_margin;
+      scale = (height - 2 * priv->icon_margin) * window_scale;
       temp_pixbuf = gdk_pixbuf_scale_simple (pixbuf, scale, scale,
                                              GDK_INTERP_BILINEAR);
       g_object_unref (pixbuf);
       pixbuf = temp_pixbuf;
     }
 
-  x = (width  - gdk_pixbuf_get_width (pixbuf)) / 2;
-  y = (height - gdk_pixbuf_get_height (pixbuf)) / 2;
+  x = (width  - (gdk_pixbuf_get_width (pixbuf) / window_scale)) / 2;
+  y = (height - (gdk_pixbuf_get_height (pixbuf) / window_scale)) / 2;
 
   if (!gtk_widget_is_sensitive (widget) ||
       icon_info->insensitive)
@@ -6455,6 +6501,17 @@ gtk_entry_clear (GtkEntry             *entry,
                        icon_pos == GTK_ENTRY_ICON_PRIMARY ? "primary-icon-gicon" : "secondary-icon-gicon");
       break;
 
+    case GTK_IMAGE_ICON_SET:
+      if (icon_info->icon_set)
+        {
+          gtk_icon_set_unref (icon_info->icon_set);
+          icon_info->icon_set = NULL;
+        }
+
+      g_object_notify (G_OBJECT (entry),
+                       icon_pos == GTK_ENTRY_ICON_PRIMARY ? "primary-icon-set" : "secondary-icon-set");
+      break;
+
     default:
       g_assert_not_reached ();
       break;
@@ -6494,15 +6551,18 @@ gtk_entry_ensure_pixbuf (GtkEntry             *entry,
     case GTK_IMAGE_STOCK:
       state = gtk_widget_get_state (widget);
       gtk_widget_set_state (widget, GTK_STATE_NORMAL);
-      icon_info->pixbuf = gtk_widget_render_icon (widget,
-                                                  icon_info->stock_id,
-                                                  GTK_ICON_SIZE_MENU,
-                                                  NULL);
+      icon_info->render_scale = gtk_widget_get_scale_factor (widget);
+      icon_info->pixbuf = gtk_widget_render_icon_scaled (widget,
+                                                         icon_info->stock_id,
+                                                         GTK_ICON_SIZE_MENU,
+                                                         NULL,
+                                                         &icon_info->render_scale);
       if (!icon_info->pixbuf)
-        icon_info->pixbuf = gtk_widget_render_icon (widget,
-                                                    GTK_STOCK_MISSING_IMAGE,
-                                                    GTK_ICON_SIZE_MENU,
-                                                    NULL);
+        icon_info->pixbuf = gtk_widget_render_icon_scaled (widget,
+                                                           GTK_STOCK_MISSING_IMAGE,
+                                                           GTK_ICON_SIZE_MENU,
+                                                           NULL,
+                                                           &icon_info->render_scale);
       gtk_widget_set_state (widget, state);
       break;
 
@@ -6514,8 +6574,9 @@ gtk_entry_ensure_pixbuf (GtkEntry             *entry,
           settings = gtk_settings_get_for_screen (screen);
           
           gtk_icon_size_lookup_for_settings (settings,
-                                             GTK_ICON_SIZE_MENU,
-                                             &width, &height);
+                                       GTK_ICON_SIZE_MENU,
+                                //                                       gdk_window_get_scale_factor (widget->window),
+                                       &width, &height);
 
           icon_info->pixbuf = gtk_icon_theme_load_icon (icon_theme,
                                                         icon_info->icon_name,
@@ -6543,8 +6604,9 @@ gtk_entry_ensure_pixbuf (GtkEntry             *entry,
           settings = gtk_settings_get_for_screen (screen);
 
           gtk_icon_size_lookup_for_settings (settings,
-                                             GTK_ICON_SIZE_MENU,
-                                             &width, &height);
+                                       GTK_ICON_SIZE_MENU,
+                                             //gdk_window_get_scale_factor (widget->window),
+                                       &width, &height);
 
           info = gtk_icon_theme_lookup_by_gicon (icon_theme,
                                                  icon_info->gicon,
@@ -6569,6 +6631,17 @@ gtk_entry_ensure_pixbuf (GtkEntry             *entry,
         }
       break;
 
+    case GTK_IMAGE_ICON_SET:
+      icon_info->render_scale = gtk_widget_get_scale_factor (widget);
+      icon_info->pixbuf =
+        gtk_icon_set_render_icon_scaled (icon_info->icon_set,
+                                         widget->style,
+                                         gtk_widget_get_direction (widget),
+                                         gtk_widget_get_state (widget),
+                                         GTK_ICON_SIZE_MENU, widget,
+                                         NULL, &icon_info->render_scale);
+      break;
+
     default:
       g_assert_not_reached ();
       break;
@@ -7847,6 +7920,58 @@ gtk_entry_set_icon_from_gicon (GtkEntry             *entry,
   g_object_thaw_notify (G_OBJECT (entry));
 }
 
+void
+gtk_entry_set_icon_from_icon_set (GtkEntry             *entry,
+                                  GtkEntryIconPosition  icon_pos,
+                                  GtkIconSet           *icon_set)
+{
+  GtkEntryPrivate *priv;
+  EntryIconInfo *icon_info;
+
+  g_return_if_fail (GTK_IS_ENTRY (entry));
+  g_return_if_fail (IS_VALID_ICON_POSITION (icon_pos));
+
+  priv = GTK_ENTRY_GET_PRIVATE (entry);
+
+  if ((icon_info = priv->icons[icon_pos]) == NULL)
+    icon_info = construct_icon_info (GTK_WIDGET (entry), icon_pos);
+
+  g_object_freeze_notify (G_OBJECT (entry));
+
+  /* need to ref before clearing */
+  if (icon_set)
+    gtk_icon_set_ref (icon_set);
+
+  gtk_entry_clear (entry, icon_pos);
+
+  if (icon_set)
+    {
+      icon_info->storage_type = GTK_IMAGE_ICON_SET;
+      icon_info->icon_set = icon_set;
+
+      if (icon_pos == GTK_ENTRY_ICON_PRIMARY)
+        {
+          g_object_notify (G_OBJECT (entry), "primary-icon-set");
+          g_object_notify (G_OBJECT (entry), "primary-icon-storage-type");
+        }
+      else
+        {
+          g_object_notify (G_OBJECT (entry), "secondary-icon-set");
+          g_object_notify (G_OBJECT (entry), "secondary-icon-storage-type");
+        }
+
+      if (gtk_widget_get_mapped (GTK_WIDGET (entry)))
+          gdk_window_show_unraised (icon_info->window);
+    }
+
+  gtk_entry_ensure_pixbuf (entry, icon_pos);
+
+  if (gtk_widget_get_visible (GTK_WIDGET (entry)))
+    gtk_widget_queue_resize (GTK_WIDGET (entry));
+
+  g_object_thaw_notify (G_OBJECT (entry));
+}
+
 /**
  * gtk_entry_set_icon_activatable:
  * @entry: A #GtkEntry
@@ -8050,6 +8175,25 @@ gtk_entry_get_icon_name (GtkEntry             *entry,
   return icon_info->storage_type == GTK_IMAGE_ICON_NAME ? icon_info->icon_name : NULL;
 }
 
+const GtkIconSet *
+gtk_entry_get_icon_set (GtkEntry             *entry,
+                        GtkEntryIconPosition  icon_pos)
+{
+  GtkEntryPrivate *priv;
+  EntryIconInfo *icon_info;
+
+  g_return_val_if_fail (GTK_IS_ENTRY (entry), NULL);
+  g_return_val_if_fail (IS_VALID_ICON_POSITION (icon_pos), NULL);
+
+  priv = GTK_ENTRY_GET_PRIVATE (entry);
+  icon_info = priv->icons[icon_pos];
+
+  if (!icon_info)
+    return NULL;
+
+  return icon_info->storage_type == GTK_IMAGE_ICON_SET ? icon_info->icon_set : NULL;
+}
+
 /**
  * gtk_entry_set_icon_sensitive:
  * @entry: A #GtkEntry
diff --git a/gtk/gtkentry.h b/gtk/gtkentry.h
index f771e17..0153f49 100644
--- a/gtk/gtkentry.h
+++ b/gtk/gtkentry.h
@@ -264,6 +264,9 @@ void           gtk_entry_set_icon_from_icon_name         (GtkEntry             *
 void           gtk_entry_set_icon_from_gicon             (GtkEntry             *entry,
 							  GtkEntryIconPosition  icon_pos,
 							  GIcon                *icon);
+void           gtk_entry_set_icon_from_icon_set          (GtkEntry             *entry,
+							  GtkEntryIconPosition  icon_pos,
+							  GtkIconSet           *icon_set);
 GtkImageType gtk_entry_get_icon_storage_type             (GtkEntry             *entry,
 							  GtkEntryIconPosition  icon_pos);
 GdkPixbuf*   gtk_entry_get_icon_pixbuf                   (GtkEntry             *entry,
@@ -274,6 +277,10 @@ const gchar* gtk_entry_get_icon_name                     (GtkEntry             *
 							  GtkEntryIconPosition  icon_pos);
 GIcon*       gtk_entry_get_icon_gicon                    (GtkEntry             *entry,
 							  GtkEntryIconPosition  icon_pos);
+const GtkIconSet *
+             gtk_entry_get_icon_set                      (GtkEntry             *entry,
+                                                          GtkEntryIconPosition  icon_pos);
+
 void         gtk_entry_set_icon_activatable              (GtkEntry             *entry,
 							  GtkEntryIconPosition  icon_pos,
 							  gboolean              activatable);
diff --git a/gtk/gtkiconfactory.c b/gtk/gtkiconfactory.c
index c4b6c9c..291c05e 100644
--- a/gtk/gtkiconfactory.c
+++ b/gtk/gtkiconfactory.c
@@ -66,6 +66,7 @@ struct _GtkIconSource
   GtkTextDirection direction;
   GtkStateType state;
   GtkIconSize size;
+  gdouble scale;
 
   /* If TRUE, then the parameter is wildcarded, and the above
    * fields should be ignored. If FALSE, the parameter is
@@ -74,6 +75,7 @@ struct _GtkIconSource
   guint any_direction : 1;
   guint any_state : 1;
   guint any_size : 1;
+  guint any_scale : 1;
 
 #if defined (G_OS_WIN32) && !defined (_WIN64)
   /* System codepage version of filename, for DLL ABI backward
@@ -106,10 +108,10 @@ static GtkIconSize icon_size_register_intern (const gchar *name,
 					      gint         width,
 					      gint         height);
 
-#define GTK_ICON_SOURCE_INIT(any_direction, any_state, any_size)	\
+#define GTK_ICON_SOURCE_INIT(any_direction, any_state, any_size, any_scale)	\
   { GTK_ICON_SOURCE_EMPTY, { NULL }, NULL,				\
-   0, 0, 0,								\
-   any_direction, any_state, any_size }
+   0, 0, 0, 1,								\
+   any_direction, any_state, any_size, any_scale }
 
 G_DEFINE_TYPE_WITH_CODE (GtkIconFactory, gtk_icon_factory, G_TYPE_OBJECT,
 			 G_IMPLEMENT_INTERFACE (GTK_TYPE_BUILDABLE,
@@ -349,7 +351,7 @@ register_stock_icon (GtkIconFactory *factory,
                      const gchar    *icon_name)
 {
   GtkIconSet *set = gtk_icon_set_new ();
-  GtkIconSource source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE);
+  GtkIconSource source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE, TRUE);
 
   source.type = GTK_ICON_SOURCE_STATIC_ICON_NAME;
   source.source.icon_name = (gchar *)icon_name;
@@ -366,7 +368,7 @@ register_bidi_stock_icon (GtkIconFactory *factory,
                           const gchar    *icon_name)
 {
   GtkIconSet *set = gtk_icon_set_new ();
-  GtkIconSource source = GTK_ICON_SOURCE_INIT (FALSE, TRUE, TRUE);
+  GtkIconSource source = GTK_ICON_SOURCE_INIT (FALSE, TRUE, TRUE, TRUE);
 
   source.type = GTK_ICON_SOURCE_STATIC_ICON_NAME;
   source.source.icon_name = (gchar *)icon_name;
@@ -801,6 +803,7 @@ icon_sizes_init_for_settings (GtkSettings *settings)
 static gboolean
 icon_size_lookup_intern (GtkSettings *settings,
 			 GtkIconSize  size,
+                         gdouble      scale,
 			 gint        *widthp,
 			 gint        *heightp)
 {
@@ -840,10 +843,16 @@ icon_size_lookup_intern (GtkSettings *settings,
     }
 
   if (widthp)
-    *widthp = width_for_settings >= 0 ? width_for_settings : icon_sizes[size].width;
+    {
+      *widthp = width_for_settings >= 0 ? width_for_settings : icon_sizes[size].width;
+      (*widthp) *= scale;
+    }
 
   if (heightp)
-    *heightp = height_for_settings >= 0 ? height_for_settings : icon_sizes[size].height;
+    {
+      *heightp = height_for_settings >= 0 ? height_for_settings : icon_sizes[size].height;
+      (*heightp) *= scale;
+    }
 
   return TRUE;
 }
@@ -879,7 +888,7 @@ gtk_icon_size_lookup_for_settings (GtkSettings *settings,
 {
   g_return_val_if_fail (GTK_IS_SETTINGS (settings), FALSE);
 
-  return icon_size_lookup_intern (settings, size, width, height);
+  return icon_size_lookup_intern (settings, size, 1, width, height);
 }
 
 /**
@@ -914,6 +923,18 @@ gtk_icon_size_lookup (GtkIconSize  size,
 					    size, widthp, heightp);
 }
 
+gboolean
+gtk_icon_size_lookup_scaled (GtkSettings *settings,
+                             GtkIconSize  size,
+                             gdouble      scale,
+                             gint        *width,
+                             gint        *height)
+{
+  g_return_val_if_fail (GTK_IS_SETTINGS (settings), FALSE);
+
+  return icon_size_lookup_intern (settings, size, scale, width, height);
+}
+
 static GtkIconSize
 icon_size_register_intern (const gchar *name,
 			   gint         width,
@@ -1000,7 +1021,7 @@ gtk_icon_size_register_alias (const gchar *alias,
 
   init_icon_sizes ();
 
-  if (!icon_size_lookup_intern (NULL, target, NULL, NULL))
+  if (!icon_size_lookup_intern (NULL, target, 1, NULL, NULL))
     g_warning ("gtk_icon_size_register_alias: Icon size %u does not exist", target);
 
   ia = g_hash_table_lookup (icon_aliases, alias);
@@ -1075,12 +1096,14 @@ static GdkPixbuf *find_in_cache     (GtkIconSet       *icon_set,
                                      GtkStyle         *style,
                                      GtkTextDirection  direction,
                                      GtkStateType      state,
-                                     GtkIconSize       size);
+                                     GtkIconSize       size,
+				     gdouble           scale);
 static void       add_to_cache      (GtkIconSet       *icon_set,
                                      GtkStyle         *style,
                                      GtkTextDirection  direction,
                                      GtkStateType      state,
                                      GtkIconSize       size,
+                                     gdouble           scale,
                                      GdkPixbuf        *pixbuf);
 /* Clear icon set contents, drop references to all contained
  * GdkPixbuf objects and forget all GtkIconSources. Used to
@@ -1160,7 +1183,7 @@ gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf)
 {
   GtkIconSet *set;
 
-  GtkIconSource source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE);
+  GtkIconSource source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE, TRUE);
 
   g_return_val_if_fail (pixbuf != NULL, NULL);
 
@@ -1288,8 +1311,8 @@ sizes_equivalent (GtkIconSize lhs,
 
   gint r_w, r_h, l_w, l_h;
 
-  icon_size_lookup_intern (NULL, rhs, &r_w, &r_h);
-  icon_size_lookup_intern (NULL, lhs, &l_w, &l_h);
+  icon_size_lookup_intern (NULL, rhs, 1, &r_w, &r_h);
+  icon_size_lookup_intern (NULL, lhs, 1, &l_w, &l_h);
 
   return r_w == l_w && r_h == l_h;
 #endif
@@ -1300,6 +1323,7 @@ find_best_matching_source (GtkIconSet       *icon_set,
 			   GtkTextDirection  direction,
 			   GtkStateType      state,
 			   GtkIconSize       size,
+			   gdouble           scale,
 			   GSList           *failed)
 {
   GtkIconSource *source;
@@ -1321,7 +1345,8 @@ find_best_matching_source (GtkIconSet       *icon_set,
 
       if ((s->any_direction || (s->direction == direction)) &&
           (s->any_state || (s->state == state)) &&
-          (s->any_size || size == (GtkIconSize)-1 || (sizes_equivalent (size, s->size))))
+          (s->any_size || size == (GtkIconSize)-1 || (sizes_equivalent (size, s->size))) &&
+          (s->any_scale || (s->scale == scale)))
         {
 	  if (!g_slist_find (failed, s))
 	    {
@@ -1372,7 +1397,8 @@ render_icon_name_pixbuf (GtkIconSource    *icon_source,
 			 GtkStateType      state,
 			 GtkIconSize       size,
 			 GtkWidget        *widget,
-			 const char       *detail)
+			 const char       *detail,
+                         gdouble           scale)
 {
   GdkPixbuf *pixbuf;
   GdkPixbuf *tmp_pixbuf;
@@ -1454,9 +1480,10 @@ render_icon_name_pixbuf (GtkIconSource    *icon_source,
       names[1] = icon_source->source.icon_name;
       names[2] = NULL;
 
-      info = gtk_icon_theme_choose_icon (icon_theme,
-                                         names,
-                                         pixel_size, GTK_ICON_LOOKUP_USE_BUILTIN);
+      info = gtk_icon_theme_choose_icon_for_scale (icon_theme,
+                                                   names,
+                                                   pixel_size, scale,
+                                                   GTK_ICON_LOOKUP_USE_BUILTIN);
       g_free (name_with_dir);
       if (info)
         {
@@ -1466,10 +1493,10 @@ render_icon_name_pixbuf (GtkIconSource    *icon_source,
     }
   else
     {
-      tmp_pixbuf = gtk_icon_theme_load_icon (icon_theme,
-                                             icon_source->source.icon_name,
-                                             pixel_size, 0,
-                                             &error);
+      tmp_pixbuf = gtk_icon_theme_load_icon_for_scale (icon_theme,
+                                                       icon_source->source.icon_name,
+                                                       pixel_size, scale, 0,
+                                                       &error);
     }
 
   if (!tmp_pixbuf)
@@ -1504,7 +1531,8 @@ find_and_render_icon_source (GtkIconSet       *icon_set,
 			     GtkStateType      state,
 			     GtkIconSize       size,
 			     GtkWidget         *widget,
-			     const char        *detail)
+			     const char        *detail,
+			     gdouble           scale)
 {
   GSList *failed = NULL;
   GdkPixbuf *pixbuf = NULL;
@@ -1521,7 +1549,7 @@ find_and_render_icon_source (GtkIconSet       *icon_set,
    */
   while (pixbuf == NULL)
     {
-      GtkIconSource *source = find_best_matching_source (icon_set, direction, state, size, failed);
+      GtkIconSource *source = find_best_matching_source (icon_set, direction, state, size, scale, failed);
 
       if (source == NULL)
 	break;
@@ -1546,7 +1574,7 @@ find_and_render_icon_source (GtkIconSet       *icon_set,
 	case GTK_ICON_SOURCE_STATIC_ICON_NAME:
 	  pixbuf = render_icon_name_pixbuf (source, style,
 					    direction, state, size,
-					    widget, detail);
+					    widget, detail, scale);
 	  if (!pixbuf)
 	    failed = g_slist_prepend (failed, source);
 	  break;
@@ -1571,7 +1599,7 @@ render_fallback_image (GtkStyle          *style,
                        const char        *detail)
 {
   /* This icon can be used for any direction/state/size */
-  static GtkIconSource fallback_source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE);
+  static GtkIconSource fallback_source = GTK_ICON_SOURCE_INIT (TRUE, TRUE, TRUE, TRUE);
 
   if (fallback_source.type == GTK_ICON_SOURCE_EMPTY)
     {
@@ -1598,6 +1626,78 @@ render_fallback_image (GtkStyle          *style,
                                 detail);
 }
 
+static gdouble
+_get_real_scale (GtkWidget   *widget,
+                 GtkStyle    *style,
+                 GtkIconSize  size,
+                 GdkPixbuf   *icon)
+{
+  GtkSettings *settings;
+  GdkScreen *screen;
+  gint icon_width;
+
+  if (widget && gtk_widget_has_screen (widget))
+    screen = gtk_widget_get_screen (widget);
+  else if (style && style->colormap)
+    screen = gdk_colormap_get_screen (style->colormap);
+  else
+    {
+      screen = gdk_screen_get_default ();
+      GTK_NOTE (MULTIHEAD,
+                g_warning ("Using the default screen for gtk_icon_set_render_icon()"));
+    }
+
+  settings = gtk_settings_get_for_screen (screen);
+  gtk_icon_size_lookup_for_settings (settings, size, &icon_width, NULL);
+
+  return round ((gdouble) gdk_pixbuf_get_width (icon) / icon_width);
+}
+
+GdkPixbuf*
+gtk_icon_set_render_icon_internal (GtkIconSet        *icon_set,
+                                   GtkStyle          *style,
+                                   GtkTextDirection   direction,
+                                   GtkStateType       state,
+                                   GtkIconSize        size,
+                                   GtkWidget         *widget,
+                                   const char        *detail,
+				   gdouble           *scale)
+{
+  GdkPixbuf *icon;
+
+  if (icon_set->sources == NULL)
+    return render_fallback_image (style, direction, state, size, widget, detail);
+
+  if (detail == NULL)
+    {
+      icon = find_in_cache (icon_set, style, direction,
+			    state, size, *scale);
+
+      if (icon)
+	{
+	  g_object_ref (icon);
+
+	  *scale = _get_real_scale (widget, style, size, icon);
+
+	  return icon;
+	}
+    }
+
+
+  icon = find_and_render_icon_source (icon_set, style, direction, state, size,
+				      widget, detail, *scale);
+
+  if (icon == NULL)
+    icon = render_fallback_image (style, direction, state, size, widget, detail);
+
+  *scale = _get_real_scale (widget, style, size, icon);
+
+  if (detail == NULL)
+    add_to_cache (icon_set, style, direction, state, size, *scale, icon);
+
+  return icon;
+}
+
 /**
  * gtk_icon_set_render_icon:
  * @icon_set: a #GtkIconSet
@@ -1631,42 +1731,58 @@ gtk_icon_set_render_icon (GtkIconSet        *icon_set,
                           GtkWidget         *widget,
                           const char        *detail)
 {
-  GdkPixbuf *icon;
+  GdkPixbuf *pixbuf, *variant;
+  gdouble scale = 1;
 
   g_return_val_if_fail (icon_set != NULL, NULL);
   g_return_val_if_fail (style == NULL || GTK_IS_STYLE (style), NULL);
 
-  if (icon_set->sources == NULL)
-    return render_fallback_image (style, direction, state, size, widget, detail);
-
-  if (detail == NULL)
+  pixbuf = gtk_icon_set_render_icon_internal (icon_set, style, direction,
+                                              state, size, widget, detail,
+                                              &scale);
+  if (pixbuf && scale == 1)
     {
-      icon = find_in_cache (icon_set, style, direction,
-                        state, size);
-
-      if (icon)
-	{
-	  g_object_ref (icon);
-	  return icon;
-	}
+      scale = 2;
+      variant = gtk_icon_set_render_icon_internal (icon_set, style, direction,
+                                                   state, size, widget, detail,
+                                                   &scale);
+      if (variant &&
+	  gdk_pixbuf_get_width (variant) > gdk_pixbuf_get_width (pixbuf))
+        g_object_set_data_full (G_OBJECT (pixbuf),
+                                "gdk-pixbuf-2x-variant",
+                                variant,
+                                (GDestroyNotify) g_object_unref);
+      else if (variant)
+        g_object_unref (variant);
     }
 
+  return pixbuf;
+}
 
-  icon = find_and_render_icon_source (icon_set, style, direction, state, size,
-				      widget, detail);
-
-  if (icon == NULL)
-    icon = render_fallback_image (style, direction, state, size, widget, detail);
+GdkPixbuf*
+gtk_icon_set_render_icon_scaled (GtkIconSet        *icon_set,
+                                 GtkStyle          *style,
+                                 GtkTextDirection   direction,
+                                 GtkStateType       state,
+                                 GtkIconSize        size,
+                                 GtkWidget         *widget,
+                                 const char        *detail,
+                                 gdouble           *scale)
+{
+  g_return_val_if_fail (icon_set != NULL, NULL);
+  g_return_val_if_fail (style == NULL || GTK_IS_STYLE (style), NULL);
+  g_return_val_if_fail (scale != NULL, NULL);
 
-  if (detail == NULL)
-    add_to_cache (icon_set, style, direction, state, size, icon);
+  *scale = MAX (*scale, 1);
 
-  return icon;
+  return gtk_icon_set_render_icon_internal (icon_set, style, direction,
+                                            state, size, widget, detail,
+                                            scale);
 }
 
 /* Order sources by their "wildness", so that "wilder" sources are
  * greater than "specific" sources; for determining ordering,
- * direction beats state beats size.
+ * direction beats state beats size beats scale.
  */
 
 static int
@@ -1687,6 +1803,10 @@ icon_source_compare (gconstpointer ap, gconstpointer bp)
     return -1;
   else if (a->any_size && !b->any_size)
     return 1;
+  else if (!a->any_scale && b->any_scale)
+    return -1;
+  else if (a->any_scale && !b->any_scale)
+    return 1;
   else
     return 0;
 }
@@ -1864,10 +1984,12 @@ gtk_icon_source_new (void)
   src->direction = GTK_TEXT_DIR_NONE;
   src->size = GTK_ICON_SIZE_INVALID;
   src->state = GTK_STATE_NORMAL;
+  src->scale = 1;
 
   src->any_direction = TRUE;
   src->any_state = TRUE;
   src->any_size = TRUE;
+  src->any_scale = TRUE;
 
   return src;
 }
@@ -2218,6 +2340,15 @@ gtk_icon_source_set_size_wildcarded (GtkIconSource *source,
   source->any_size = setting != FALSE;
 }
 
+void
+gtk_icon_source_set_scale_wildcarded (GtkIconSource *source,
+                                      gboolean       setting)
+{
+  g_return_if_fail (source != NULL);
+
+  source->any_scale = setting != FALSE;
+}
+
 /**
  * gtk_icon_source_get_size_wildcarded:
  * @source: a #GtkIconSource
@@ -2266,6 +2397,14 @@ gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source)
   return source->any_direction;
 }
 
+gboolean
+gtk_icon_source_get_scale_wildcarded (const GtkIconSource *source)
+{
+  g_return_val_if_fail (source != NULL, TRUE);
+
+  return source->any_scale;
+}
+
 /**
  * gtk_icon_source_set_direction:
  * @source: a #GtkIconSource
@@ -2332,6 +2471,15 @@ gtk_icon_source_set_size (GtkIconSource *source,
   source->size = size;
 }
 
+void
+gtk_icon_source_set_scale (GtkIconSource *source,
+                           gdouble        scale)
+{
+  g_return_if_fail (source != NULL);
+
+  source->scale = scale;
+}
+
 /**
  * gtk_icon_source_get_direction:
  * @source: a #GtkIconSource
@@ -2385,6 +2533,14 @@ gtk_icon_source_get_size (const GtkIconSource *source)
   return source->size;
 }
 
+gdouble
+gtk_icon_source_get_scale (const GtkIconSource *source)
+{
+  g_return_val_if_fail (source != NULL, 0);
+
+  return source->scale;
+}
+
 #define NUM_CACHED_ICONS 8
 
 typedef struct _CachedIcon CachedIcon;
@@ -2398,6 +2554,7 @@ struct _CachedIcon
   GtkTextDirection direction;
   GtkStateType state;
   GtkIconSize size;
+  gdouble scale;
 
   GdkPixbuf *pixbuf;
 };
@@ -2428,7 +2585,8 @@ find_in_cache (GtkIconSet      *icon_set,
                GtkStyle        *style,
                GtkTextDirection direction,
                GtkStateType     state,
-               GtkIconSize      size)
+               GtkIconSize      size,
+               gdouble          scale)
 {
   GSList *tmp_list;
   GSList *prev;
@@ -2444,6 +2602,7 @@ find_in_cache (GtkIconSet      *icon_set,
       if (icon->style == style &&
           icon->direction == direction &&
           icon->state == state &&
+          icon->scale == scale &&
           (size == (GtkIconSize)-1 || icon->size == size))
         {
           if (prev)
@@ -2470,6 +2629,7 @@ add_to_cache (GtkIconSet      *icon_set,
               GtkTextDirection direction,
               GtkStateType     state,
               GtkIconSize      size,
+              gdouble          scale,
               GdkPixbuf       *pixbuf)
 {
   CachedIcon *icon;
@@ -2494,6 +2654,7 @@ add_to_cache (GtkIconSet      *icon_set,
   icon->direction = direction;
   icon->state = state;
   icon->size = size;
+  icon->scale = scale;
   icon->pixbuf = pixbuf;
 
   if (icon->style)
@@ -2984,5 +3145,37 @@ gtk_icon_source_get_filename (const GtkIconSource *source)
 
 #endif
 
+void
+gtk_cairo_set_source_icon_set (cairo_t         *cr,
+                               GtkWidget       *widget,
+                               GtkIconSet      *icon_set,
+                               GtkIconSize      size,
+                               gdouble          scale,
+                               gdouble          icon_x,
+                               gdouble          icon_y)
+{
+  cairo_pattern_t *pattern;
+  cairo_matrix_t matrix;
+  GdkPixbuf *pixbuf;
+
+  g_return_if_fail (GTK_IS_WIDGET (widget));
+  g_return_if_fail (cr != NULL);
+  g_return_if_fail (icon_set != NULL);
+
+  pixbuf = gtk_icon_set_render_icon_scaled (icon_set,
+                                            gtk_widget_get_style (widget),
+                                            gtk_widget_get_direction (widget),
+                                            gtk_widget_get_state (widget),
+                                            size, widget, NULL, &scale);
+  gdk_cairo_set_source_pixbuf (cr, pixbuf, 0, 0);
+
+  pattern = cairo_get_source (cr);
+  cairo_matrix_init_scale (&matrix, scale, scale);
+  cairo_matrix_translate (&matrix, -icon_x, -icon_y);
+  cairo_pattern_set_matrix (pattern, &matrix);
+
+  g_object_unref (pixbuf);
+}
+
 #define __GTK_ICON_FACTORY_C__
 #include "gtkaliasdef.c"
diff --git a/gtk/gtkiconfactory.h b/gtk/gtkiconfactory.h
index ea97123..67e318a 100644
--- a/gtk/gtkiconfactory.h
+++ b/gtk/gtkiconfactory.h
@@ -105,6 +105,11 @@ gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings,
 					    GtkIconSize  size,
 					    gint        *width,
 					    gint        *height);
+gboolean gtk_icon_size_lookup_scaled       (GtkSettings *settings,
+                                            GtkIconSize  size,
+                                            gdouble      scale,
+                                            gint        *width,
+                                            gint        *height);
 
 GtkIconSize           gtk_icon_size_register       (const gchar *name,
                                                     gint         width,
@@ -134,7 +139,14 @@ GdkPixbuf*  gtk_icon_set_render_icon     (GtkIconSet      *icon_set,
                                           GtkIconSize      size,
                                           GtkWidget       *widget,
                                           const char      *detail);
-
+GdkPixbuf* gtk_icon_set_render_icon_scaled (GtkIconSet        *icon_set,
+                                            GtkStyle          *style,
+                                            GtkTextDirection   direction,
+                                            GtkStateType       state,
+                                            GtkIconSize        size,
+                                            GtkWidget         *widget,
+                                            const char        *detail,
+                                            gdouble           *real_scale);
 
 void           gtk_icon_set_add_source   (GtkIconSet          *icon_set,
                                           const GtkIconSource *source);
@@ -165,19 +177,33 @@ void             gtk_icon_source_set_state_wildcarded     (GtkIconSource       *
                                                            gboolean             setting);
 void             gtk_icon_source_set_size_wildcarded      (GtkIconSource       *source,
                                                            gboolean             setting);
+void             gtk_icon_source_set_scale_wildcarded     (GtkIconSource       *source,
+                                                           gboolean             setting);
 gboolean         gtk_icon_source_get_size_wildcarded      (const GtkIconSource *source);
 gboolean         gtk_icon_source_get_state_wildcarded     (const GtkIconSource *source);
 gboolean         gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
+gboolean         gtk_icon_source_get_scale_wildcarded     (const GtkIconSource *source);
 void             gtk_icon_source_set_direction            (GtkIconSource       *source,
                                                            GtkTextDirection     direction);
 void             gtk_icon_source_set_state                (GtkIconSource       *source,
                                                            GtkStateType         state);
 void             gtk_icon_source_set_size                 (GtkIconSource       *source,
                                                            GtkIconSize          size);
+void             gtk_icon_source_set_scale                (GtkIconSource       *source,
+                                                           gdouble              scale);
 GtkTextDirection gtk_icon_source_get_direction            (const GtkIconSource *source);
 GtkStateType     gtk_icon_source_get_state                (const GtkIconSource *source);
 GtkIconSize      gtk_icon_source_get_size                 (const GtkIconSource *source);
-
+gdouble          gtk_icon_source_get_scale                (const GtkIconSource *source);
+
+/* Cairo helper */
+void             gtk_cairo_set_source_icon_set            (cairo_t             *cr,
+                                                           GtkWidget           *widget,
+                                                           GtkIconSet          *icon_set,
+                                                           GtkIconSize          size,
+                                                           gdouble              scale,
+                                                           gdouble              icon_x,
+                                                           gdouble              icon_y);
 
 /* ignore this */
 void _gtk_icon_set_invalidate_caches (void);
diff --git a/gtk/gtkicontheme.c b/gtk/gtkicontheme.c
index bf81546..0e42adc 100644
--- a/gtk/gtkicontheme.c
+++ b/gtk/gtkicontheme.c
@@ -168,6 +168,7 @@ typedef struct
   int min_size;
   int max_size;
   int threshold;
+  int scale;
 
   char *dir;
   char *subdir;
@@ -206,6 +207,7 @@ static void         theme_destroy     (IconTheme        *theme);
 static GtkIconInfo *theme_lookup_icon (IconTheme        *theme,
 				       const char       *icon_name,
 				       int               size,
+                                       gdouble           scale,
 				       gboolean          allow_svg,
 				       gboolean          use_default_icons);
 static void         theme_list_icons  (IconTheme        *theme,
@@ -1161,11 +1163,11 @@ _gtk_icon_theme_ensure_builtin_cache (void)
   IconThemeDir *dir;
   static IconThemeDir dirs[5] = 
     {
-      { ICON_THEME_DIR_THRESHOLD, 0, 16, 16, 16, 2, NULL, "16", -1, NULL, NULL, NULL },
-      { ICON_THEME_DIR_THRESHOLD, 0, 20, 20, 20, 2, NULL, "20", -1,  NULL, NULL, NULL },
-      { ICON_THEME_DIR_THRESHOLD, 0, 24, 24, 24, 2, NULL, "24", -1, NULL, NULL, NULL },
-      { ICON_THEME_DIR_THRESHOLD, 0, 32, 32, 32, 2, NULL, "32", -1, NULL, NULL, NULL },
-      { ICON_THEME_DIR_THRESHOLD, 0, 48, 48, 48, 2, NULL, "48", -1, NULL, NULL, NULL }
+      { ICON_THEME_DIR_THRESHOLD, 0, 16, 16, 16, 2, 1, NULL, "16", -1, NULL, NULL, NULL },
+      { ICON_THEME_DIR_THRESHOLD, 0, 20, 20, 20, 2, 1, NULL, "20", -1,  NULL, NULL, NULL },
+      { ICON_THEME_DIR_THRESHOLD, 0, 24, 24, 24, 2, 1, NULL, "24", -1, NULL, NULL, NULL },
+      { ICON_THEME_DIR_THRESHOLD, 0, 32, 32, 32, 2, 1, NULL, "32", -1, NULL, NULL, NULL },
+      { ICON_THEME_DIR_THRESHOLD, 0, 48, 48, 48, 2, 1, NULL, "48", -1, NULL, NULL, NULL }
     };
   gint i;
 
@@ -1242,6 +1244,7 @@ static GtkIconInfo *
 choose_icon (GtkIconTheme       *icon_theme,
 	     const gchar        *icon_names[],
 	     gint                size,
+             gdouble             scale,
 	     GtkIconLookupFlags  flags)
 {
   GtkIconThemePrivate *priv;
@@ -1271,7 +1274,7 @@ choose_icon (GtkIconTheme       *icon_theme,
       
       for (i = 0; icon_names[i]; i++)
         {
-          icon_info = theme_lookup_icon (theme, icon_names[i], size, allow_svg, use_builtin);
+          icon_info = theme_lookup_icon (theme, icon_names[i], size, scale, allow_svg, use_builtin);
           if (icon_info)
             goto out;
         }
@@ -1400,12 +1403,48 @@ gtk_icon_theme_lookup_icon (GtkIconTheme       *icon_theme,
 			    gint                size,
 			    GtkIconLookupFlags  flags)
 {
+  GtkIconInfo *retval, *variant;
+
+  g_return_val_if_fail (GTK_IS_ICON_THEME (icon_theme), NULL);
+  g_return_val_if_fail (icon_name != NULL, NULL);
+  g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
+			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
+
+  GTK_NOTE (ICONTHEME, 
+	    g_print ("gtk_icon_theme_lookup_icon %s\n", icon_name));
+
+  retval = gtk_icon_theme_lookup_icon_for_scale (icon_theme, icon_name,
+                                                 size, 1, flags);
+
+  variant = gtk_icon_theme_lookup_icon_for_scale (icon_theme, icon_name,
+                                                  size, 2, flags);
+  if (retval && variant &&
+      retval->pixbuf && variant->pixbuf &&
+      gdk_pixbuf_get_width (variant->pixbuf) > gdk_pixbuf_get_width (retval->pixbuf))
+    g_object_set_data_full (G_OBJECT (retval->pixbuf),
+                            "gdk-pixbuf-2x-variant",
+                            g_object_ref (variant->pixbuf),
+                            (GDestroyNotify) g_object_unref);
+  if (variant)
+    gtk_icon_info_free (variant);
+
+  return retval;
+}
+
+GtkIconInfo *
+gtk_icon_theme_lookup_icon_for_scale (GtkIconTheme       *icon_theme,
+                                      const gchar        *icon_name,
+                                      gint                size,
+                                      gdouble             scale,
+                                      GtkIconLookupFlags  flags)
+{
   GtkIconInfo *info;
 
   g_return_val_if_fail (GTK_IS_ICON_THEME (icon_theme), NULL);
   g_return_val_if_fail (icon_name != NULL, NULL);
   g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
 			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
+  g_return_val_if_fail (scale >= 1, NULL);
 
   GTK_NOTE (ICONTHEME, 
 	    g_print ("gtk_icon_theme_lookup_icon %s\n", icon_name));
@@ -1431,7 +1470,7 @@ gtk_icon_theme_lookup_icon (GtkIconTheme       *icon_theme,
         }
       names[dashes + 1] = NULL;
    
-      info = choose_icon (icon_theme, (const gchar **) names, size, flags);
+      info = choose_icon (icon_theme, (const gchar **) names, size, scale, flags);
       
       g_strfreev (names);
     }
@@ -1442,7 +1481,7 @@ gtk_icon_theme_lookup_icon (GtkIconTheme       *icon_theme,
       names[0] = icon_name;
       names[1] = NULL;
 
-      info = choose_icon (icon_theme, names, size, flags);
+      info = choose_icon (icon_theme, names, size, scale, flags);
     }
 
   return info;
@@ -1478,14 +1517,46 @@ gtk_icon_theme_choose_icon (GtkIconTheme       *icon_theme,
 			    gint                size,
 			    GtkIconLookupFlags  flags)
 {
+  GtkIconInfo *retval, *variant;
+
+  g_return_val_if_fail (GTK_IS_ICON_THEME (icon_theme), NULL);
+  g_return_val_if_fail (icon_names != NULL, NULL);
+  g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
+			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
+
+  retval = choose_icon (icon_theme, icon_names, size, 1, flags);
+  variant = choose_icon (icon_theme, icon_names, size, 2, flags);
+
+  if (retval && variant &&
+      retval->pixbuf && variant->pixbuf &&
+      gdk_pixbuf_get_width (variant->pixbuf) > gdk_pixbuf_get_width (retval->pixbuf))
+    g_object_set_data_full (G_OBJECT (retval->pixbuf),
+                            "gdk-pixbuf-2x-variant",
+                            g_object_ref (variant->pixbuf),
+                            (GDestroyNotify) g_object_unref);
+  if (variant)
+    gtk_icon_info_free (variant);
+
+  return retval;
+}
+
+GtkIconInfo *
+gtk_icon_theme_choose_icon_for_scale (GtkIconTheme       *icon_theme,
+                                      const gchar        *icon_names[],
+                                      gint                size,
+                                      gdouble             scale,
+                                      GtkIconLookupFlags  flags)
+{
   g_return_val_if_fail (GTK_IS_ICON_THEME (icon_theme), NULL);
   g_return_val_if_fail (icon_names != NULL, NULL);
   g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
 			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
+  g_return_val_if_fail (scale >= 1, NULL);
 
-  return choose_icon (icon_theme, icon_names, size, flags);
+  return choose_icon (icon_theme, icon_names, size, scale, flags);
 }
 
+
 /* Error quark */
 GQuark
 gtk_icon_theme_error_quark (void)
@@ -1529,6 +1600,40 @@ gtk_icon_theme_load_icon (GtkIconTheme         *icon_theme,
 			  GtkIconLookupFlags    flags,
 			  GError              **error)
 {
+  GdkPixbuf *pixbuf, *variant;
+
+  g_return_val_if_fail (GTK_IS_ICON_THEME (icon_theme), NULL);
+  g_return_val_if_fail (icon_name != NULL, NULL);
+  g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
+			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
+  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
+
+  pixbuf = gtk_icon_theme_load_icon_for_scale (icon_theme, icon_name,
+                                               size, 1, flags, error);
+
+  variant = gtk_icon_theme_load_icon_for_scale (icon_theme, icon_name,
+                                               size, 2, flags, NULL);
+
+  if (pixbuf && variant &&
+      gdk_pixbuf_get_width (variant) > gdk_pixbuf_get_width (pixbuf))
+    g_object_set_data_full (G_OBJECT (pixbuf),
+                            "gdk-pixbuf-2x-variant",
+                            g_object_ref (variant),
+                            (GDestroyNotify) g_object_unref);
+  if (variant)
+    g_object_unref (variant);
+
+  return pixbuf;
+}
+
+GdkPixbuf *
+gtk_icon_theme_load_icon_for_scale (GtkIconTheme        *icon_theme,
+                                    const gchar         *icon_name,
+                                    gint                 size,
+                                    gdouble              scale,
+                                    GtkIconLookupFlags   flags,
+                                    GError             **error)
+{
   GtkIconInfo *icon_info;
   GdkPixbuf *pixbuf = NULL;
   
@@ -1537,9 +1642,10 @@ gtk_icon_theme_load_icon (GtkIconTheme         *icon_theme,
   g_return_val_if_fail ((flags & GTK_ICON_LOOKUP_NO_SVG) == 0 ||
 			(flags & GTK_ICON_LOOKUP_FORCE_SVG) == 0, NULL);
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-  
-  icon_info = gtk_icon_theme_lookup_icon (icon_theme, icon_name, size,
-				          flags | GTK_ICON_LOOKUP_USE_BUILTIN);
+  g_return_val_if_fail (scale >= 1, NULL);
+
+  icon_info = gtk_icon_theme_lookup_icon_for_scale (icon_theme, icon_name, size, scale,
+                                                    flags | GTK_ICON_LOOKUP_USE_BUILTIN);
   if (!icon_info)
     {
       g_set_error (error, GTK_ICON_THEME_ERROR,  GTK_ICON_THEME_NOT_FOUND,
@@ -1976,31 +2082,42 @@ theme_dir_destroy (IconThemeDir *dir)
 }
 
 static int
-theme_dir_size_difference (IconThemeDir *dir, int size, gboolean *smaller)
+theme_dir_size_difference (IconThemeDir *dir,
+                           int           size,
+                           gdouble       scale,
+                           gboolean     *smaller,
+                           gint         *scale_diff)
 {
+  int scaled_size, scaled_dir_size;
   int min, max;
+
+  scaled_size = size * scale;
+  scaled_dir_size = dir->size * dir->scale;
+  *scale_diff = abs (scale - dir->scale);
+
   switch (dir->type)
     {
     case ICON_THEME_DIR_FIXED:
-      *smaller = size < dir->size;
-      return abs (size - dir->size);
+      *smaller = scaled_size < scaled_dir_size;
+      return abs (scaled_size - scaled_dir_size);
       break;
     case ICON_THEME_DIR_SCALABLE:
-      *smaller = size < dir->min_size;
-      if (size < dir->min_size)
-	return dir->min_size - size;
-      if (size > dir->max_size)
-	return size - dir->max_size;
+      *scale_diff = 0;
+      *smaller = scaled_size < (dir->min_size * dir->scale);
+      if (scaled_size < (dir->min_size * dir->scale))
+	return (dir->min_size * dir->scale) - scaled_size;
+      if (size > (dir->max_size * dir->scale))
+	return scaled_size - (dir->max_size * dir->scale);
       return 0;
       break;
     case ICON_THEME_DIR_THRESHOLD:
-      min = dir->size - dir->threshold;
-      max = dir->size + dir->threshold;
-      *smaller = size < min;
-      if (size < min)
-	return min - size;
-      if (size > max)
-	return size - max;
+      min = (dir->size - dir->threshold) * dir->scale;
+      max = (dir->size + dir->threshold) * dir->scale;
+      *smaller = scaled_size < min;
+      if (scaled_size < min)
+	return min - scaled_size;
+      if (scaled_size > max)
+	return scaled_size - max;
       return 0;
       break;
     case ICON_THEME_DIR_UNTHEMED:
@@ -2091,6 +2208,7 @@ static GtkIconInfo *
 theme_lookup_icon (IconTheme          *theme,
 		   const char         *icon_name,
 		   int                 size,
+                   gdouble             scale,
 		   gboolean            allow_svg,
 		   gboolean            use_builtin)
 {
@@ -2098,11 +2216,13 @@ theme_lookup_icon (IconTheme          *theme,
   IconThemeDir *dir, *min_dir;
   char *file;
   int min_difference, difference;
+  int min_scale_diff, scale_diff;
   BuiltinIcon *closest_builtin = NULL;
   gboolean smaller, has_larger, match;
   IconSuffix suffix;
 
   min_difference = G_MAXINT;
+  min_scale_diff = G_MAXINT;
   min_dir = NULL;
   has_larger = FALSE;
   match = FALSE;
@@ -2135,9 +2255,10 @@ theme_lookup_icon (IconTheme          *theme,
       suffix = theme_dir_get_icon_suffix (dir, icon_name, NULL);
       if (best_suffix (suffix, allow_svg) != ICON_SUFFIX_NONE)
 	{
-	  difference = theme_dir_size_difference (dir, size, &smaller);
+	  difference = theme_dir_size_difference (dir, size, scale,
+                                                  &smaller, &scale_diff);
 
-	  if (difference == 0)
+	  if (difference == 0 && scale_diff == 0)
 	    {
               if (dir->type == ICON_THEME_DIR_SCALABLE)
                 {
@@ -2156,13 +2277,15 @@ theme_lookup_icon (IconTheme          *theme,
                    * going and look for a closer match
                    */             
                   difference = abs (size - dir->size);
-                  if (!match || difference < min_difference)
+                  if (!match ||
+                      (scale_diff <= min_scale_diff && difference < min_difference))
                     {
                       match = TRUE;
                       min_difference = difference;
+                      min_scale_diff = scale_diff;
 	              min_dir = dir;
                     }
-                  if (difference == 0)
+                  if (difference == 0 && scale_diff == 0)
                     break;
                 }
 	    } 
@@ -2171,18 +2294,20 @@ theme_lookup_icon (IconTheme          *theme,
             {
 	      if (!has_larger)
 	        {
-	          if (difference < min_difference || smaller)
+	          if ((scale_diff <= min_scale_diff && difference < min_difference) || (scale_diff == 0 && smaller))
 	  	    {
 		      min_difference = difference;
+                      min_scale_diff = scale_diff;
 		      min_dir = dir;
 		      has_larger = smaller;
 	 	    }
 	        }
 	      else
 	        {
-	          if (difference < min_difference && smaller)
+	          if ((scale_diff <= min_scale_diff && difference < min_difference) && (scale_diff == 0 && smaller))
 		    {
 		      min_difference = difference;
+                      min_scale_diff = scale_diff;
 		      min_dir = dir;
 		    }
 	        }
@@ -2484,6 +2609,7 @@ theme_subdir_load (GtkIconTheme *icon_theme,
   char *full_dir;
   GError *error = NULL;
   IconThemeDirMtime *dir_mtime;
+  int scale;
 
   size = g_key_file_get_integer (theme_file, subdir, "Size", &error);
   if (error)
@@ -2543,6 +2669,11 @@ theme_subdir_load (GtkIconTheme *icon_theme,
       error = NULL;
     }
 
+  if (g_key_file_has_key (theme_file, subdir, "OutputScale", NULL))
+    scale = g_key_file_get_integer (theme_file, subdir, "OutputScale", NULL);
+  else
+    scale = 1;
+
   for (d = icon_theme->priv->dir_mtimes; d; d = d->next)
     {
       dir_mtime = (IconThemeDirMtime *)d->data;
@@ -2571,6 +2702,8 @@ theme_subdir_load (GtkIconTheme *icon_theme,
 	  dir->dir = full_dir;
 	  dir->icon_data = NULL;
 	  dir->subdir = g_strdup (subdir);
+          dir->scale = scale;
+
 	  if (dir_mtime->cache != NULL)
             {
 	      dir->cache = _gtk_icon_cache_ref (dir_mtime->cache);
diff --git a/gtk/gtkicontheme.h b/gtk/gtkicontheme.h
index 3611c74..9b29f96 100644
--- a/gtk/gtkicontheme.h
+++ b/gtk/gtkicontheme.h
@@ -141,16 +141,31 @@ GtkIconInfo * gtk_icon_theme_lookup_icon           (GtkIconTheme
 						    const gchar                 *icon_name,
 						    gint                         size,
 						    GtkIconLookupFlags           flags);
+GtkIconInfo * gtk_icon_theme_lookup_icon_for_scale (GtkIconTheme                *icon_theme,
+                                                    const gchar                 *icon_name,
+                                                    gint                         size,
+                                                    gdouble                      scale,
+                                                    GtkIconLookupFlags           flags);
 GtkIconInfo * gtk_icon_theme_choose_icon           (GtkIconTheme                *icon_theme,
 						    const gchar                 *icon_names[],
 						    gint                         size,
 						    GtkIconLookupFlags           flags);
+GtkIconInfo * gtk_icon_theme_choose_icon_for_scale (GtkIconTheme                *icon_theme,
+						    const gchar                 *icon_names[],
+						    gint                         size,
+                                                    gdouble                      scale,
+						    GtkIconLookupFlags           flags);
 GdkPixbuf *   gtk_icon_theme_load_icon             (GtkIconTheme                *icon_theme,
 						    const gchar                 *icon_name,
 						    gint                         size,
 						    GtkIconLookupFlags           flags,
 						    GError                     **error);
-
+GdkPixbuf *   gtk_icon_theme_load_icon_for_scale   (GtkIconTheme                *icon_theme,
+                                                    const gchar                 *icon_name,
+                                                    gint                         size,
+                                                    gdouble                      scale,
+                                                    GtkIconLookupFlags           flags,
+                                                    GError                     **error);
 GtkIconInfo * gtk_icon_theme_lookup_by_gicon       (GtkIconTheme                *icon_theme,
                                                     GIcon                       *icon,
                                                     gint                         size,
diff --git a/gtk/gtkimage.c b/gtk/gtkimage.c
index c35d962..b492d73 100644
--- a/gtk/gtkimage.c
+++ b/gtk/gtkimage.c
@@ -1717,9 +1717,11 @@ ensure_pixbuf_for_icon_name (GtkImage *image)
 	    }
 	}
       image->data.name.pixbuf =
-	gtk_icon_theme_load_icon (icon_theme,
-				  image->data.name.icon_name,
-				  MIN (width, height), flags, &error);
+	gtk_icon_theme_load_icon_for_scale (icon_theme,
+                                            image->data.name.icon_name,
+                                            MIN (width, height),
+                                            gtk_widget_get_scale_factor (GTK_WIDGET (image)),
+                                            flags, &error);
       if (image->data.name.pixbuf == NULL)
 	{
 	  g_error_free (error);
@@ -1757,9 +1759,10 @@ ensure_pixbuf_for_gicon (GtkImage *image)
 	  width = height = priv->pixel_size;
           flags |= GTK_ICON_LOOKUP_FORCE_SIZE;
 	}
-      else if (!gtk_icon_size_lookup_for_settings (settings,
-						   image->icon_size,
-						   &width, &height))
+      else if (!gtk_icon_size_lookup_scaled (settings,
+                                             image->icon_size,
+                                             gtk_widget_get_scale_factor (GTK_WIDGET (image)),
+                                             &width, &height))
 	{
 	  if (image->icon_size == -1)
 	    width = height = 48;
@@ -1848,11 +1851,11 @@ gtk_image_expose (GtkWidget      *widget,
       GdkBitmap *mask;
       GdkPixbuf *pixbuf;
       gboolean needs_state_transform;
+      gdouble render_scale = 1.0;
 
       image = GTK_IMAGE (widget);
       misc = GTK_MISC (widget);
       priv = GTK_IMAGE_GET_PRIVATE (image);
-
       area = event->area;
 
       /* For stock items and icon sets, we lazily calculate
@@ -1954,12 +1957,13 @@ gtk_image_expose (GtkWidget      *widget,
           break;
 
         case GTK_IMAGE_STOCK:
-          pixbuf = gtk_widget_render_icon (widget,
-                                           image->data.stock.stock_id,
-                                           image->icon_size,
-                                           NULL);
+          render_scale = gtk_widget_get_scale_factor (widget);
+          pixbuf = gtk_widget_render_icon_scaled (widget,
+                                                  image->data.stock.stock_id,
+                                                  image->icon_size,
+                                                  NULL, &render_scale);
           if (pixbuf)
-            {              
+            {
               image_bound.width = gdk_pixbuf_get_width (pixbuf);
               image_bound.height = gdk_pixbuf_get_height (pixbuf);
             }
@@ -1969,14 +1973,15 @@ gtk_image_expose (GtkWidget      *widget,
           break;
 
         case GTK_IMAGE_ICON_SET:
+          render_scale = gtk_widget_get_scale_factor (widget);
           pixbuf =
-            gtk_icon_set_render_icon (image->data.icon_set.icon_set,
-                                      widget->style,
-                                      gtk_widget_get_direction (widget),
-                                      gtk_widget_get_state (widget),
-                                      image->icon_size,
-                                      widget,
-                                      NULL);
+            gtk_icon_set_render_icon_scaled (image->data.icon_set.icon_set,
+                                             widget->style,
+                                             gtk_widget_get_direction (widget),
+                                             gtk_widget_get_state (widget),
+                                             image->icon_size,
+                                             widget,
+                                             NULL, &render_scale);
 
           if (pixbuf)
             {
@@ -2082,17 +2087,35 @@ gtk_image_expose (GtkWidget      *widget,
 
               if (pixbuf)
                 {
-                  gdk_draw_pixbuf (widget->window,
-				   widget->style->black_gc,
-				   pixbuf,
-				   image_bound.x - x,
-				   image_bound.y - y,
-				   image_bound.x,
-				   image_bound.y,
-				   image_bound.width,
-				   image_bound.height,
-				   GDK_RGB_DITHER_NORMAL,
-				   0, 0);
+                  if (render_scale == 1)
+                    {
+                      gdk_draw_pixbuf (widget->window,
+                                       widget->style->black_gc,
+                                       pixbuf,
+                                       image_bound.x - x,
+                                       image_bound.y - y,
+                                       image_bound.x,
+                                       image_bound.y,
+                                       image_bound.width,
+                                       image_bound.height,
+                                       GDK_RGB_DITHER_NORMAL,
+                                       0, 0);
+                    }
+                  else
+                    {
+                      cairo_t *cr = gdk_cairo_create (widget->window);
+
+                      gdk_cairo_region (cr, event->region);
+                      cairo_clip (cr);
+
+                      cairo_scale (cr, 1.0 / render_scale, 1.0 / render_scale);
+                      gdk_cairo_set_source_pixbuf (cr, pixbuf,
+                                                   image_bound.x * render_scale,
+                                                   image_bound.y * render_scale);
+
+                      cairo_paint (cr);
+                      cairo_destroy (cr);
+                    }
                 }
             }
           else
@@ -2298,8 +2321,10 @@ gtk_image_calc_size (GtkImage *image)
   GtkWidget *widget = GTK_WIDGET (image);
   GdkPixbuf *pixbuf = NULL;
   GtkImagePrivate *priv;
+  gdouble render_scale;
 
   priv = GTK_IMAGE_GET_PRIVATE (image);
+  render_scale = gtk_widget_get_scale_factor (widget);
 
   priv->need_calc_size = 0;
 
@@ -2311,20 +2336,20 @@ gtk_image_calc_size (GtkImage *image)
   switch (image->storage_type)
     {
     case GTK_IMAGE_STOCK:
-      pixbuf = gtk_widget_render_icon (widget,
-				       image->data.stock.stock_id,
-                                       image->icon_size,
-                                       NULL);
+      pixbuf = gtk_widget_render_icon_scaled (widget,
+                                              image->data.stock.stock_id,
+                                              image->icon_size,
+                                              NULL, &render_scale);
       break;
       
     case GTK_IMAGE_ICON_SET:
-      pixbuf = gtk_icon_set_render_icon (image->data.icon_set.icon_set,
-                                         widget->style,
-                                         gtk_widget_get_direction (widget),
-                                         gtk_widget_get_state (widget),
-                                         image->icon_size,
-                                         widget,
-                                         NULL);
+      pixbuf = gtk_icon_set_render_icon_scaled (image->data.icon_set.icon_set,
+                                                widget->style,
+                                                gtk_widget_get_direction (widget),
+                                                gtk_widget_get_state (widget),
+                                                image->icon_size,
+                                                widget,
+                                                NULL, &render_scale);
       break;
     case GTK_IMAGE_ICON_NAME:
       ensure_pixbuf_for_icon_name (image);
@@ -2343,9 +2368,8 @@ gtk_image_calc_size (GtkImage *image)
 
   if (pixbuf)
     {
-      widget->requisition.width = gdk_pixbuf_get_width (pixbuf) + GTK_MISC (image)->xpad * 2;
-      widget->requisition.height = gdk_pixbuf_get_height (pixbuf) + GTK_MISC (image)->ypad * 2;
-
+      widget->requisition.width = (gdk_pixbuf_get_width (pixbuf) / render_scale) + GTK_MISC (image)->xpad * 2;
+      widget->requisition.height = (gdk_pixbuf_get_height (pixbuf) / render_scale) + GTK_MISC (image)->ypad * 2;
       g_object_unref (pixbuf);
     }
 }
diff --git a/gtk/gtkwidget.c b/gtk/gtkwidget.c
index 1d1f6bb..2682eac 100644
--- a/gtk/gtkwidget.c
+++ b/gtk/gtkwidget.c
@@ -7424,15 +7424,16 @@ gtk_widget_render_icon (GtkWidget      *widget,
                         GtkIconSize     size,
                         const gchar    *detail)
 {
+  GdkPixbuf *retval, *variant;
   GtkIconSet *icon_set;
-  GdkPixbuf *retval;
-  
+  gdouble scale = 2;
+
   g_return_val_if_fail (GTK_IS_WIDGET (widget), NULL);
   g_return_val_if_fail (stock_id != NULL, NULL);
   g_return_val_if_fail (size > GTK_ICON_SIZE_INVALID || size == -1, NULL);
-  
+
   gtk_widget_ensure_style (widget);
-  
+
   icon_set = gtk_style_lookup_icon_set (widget->style, stock_id);
 
   if (icon_set == NULL)
@@ -7446,9 +7447,47 @@ gtk_widget_render_icon (GtkWidget      *widget,
                                      widget,
                                      detail);
 
+  variant = gtk_icon_set_render_icon_scaled (icon_set, widget->style,
+                                             gtk_widget_get_direction (widget),
+                                             gtk_widget_get_state (widget),
+                                             size, widget, detail, &scale);
+
+  if (variant)
+    g_object_set_data_full (G_OBJECT (retval),
+                            "gdk-pixbuf-2x-variant",
+                            variant,
+                            (GDestroyNotify) g_object_unref);
+
   return retval;
 }
 
+GdkPixbuf*
+gtk_widget_render_icon_scaled (GtkWidget      *widget,
+			       const gchar    *stock_id,
+			       GtkIconSize     size,
+			       const gchar    *detail,
+			       gdouble        *real_scale)
+{
+  GtkIconSet *icon_set;
+  GdkPixbuf *retval;
+  
+  g_return_val_if_fail (GTK_IS_WIDGET (widget), NULL);
+  g_return_val_if_fail (stock_id != NULL, NULL);
+  g_return_val_if_fail (size > GTK_ICON_SIZE_INVALID || size == -1, NULL);
+  
+  gtk_widget_ensure_style (widget);
+  
+  icon_set = gtk_style_lookup_icon_set (widget->style, stock_id);
+
+  if (icon_set == NULL)
+    return NULL;
+
+  return gtk_icon_set_render_icon_scaled (icon_set, widget->style,
+                                          gtk_widget_get_direction (widget),
+                                          gtk_widget_get_state (widget),
+                                          size, widget, detail, real_scale);
+}
+
 /**
  * gtk_widget_set_parent_window:
  * @widget: a #GtkWidget.
@@ -7660,6 +7699,26 @@ gtk_widget_has_screen (GtkWidget *widget)
   return (gtk_widget_get_screen_unchecked (widget) != NULL);
 }
 
+gdouble
+gtk_widget_get_scale_factor (GtkWidget *widget)
+{
+  GtkWidget *toplevel;
+
+  g_return_val_if_fail (GTK_IS_WIDGET (widget), 1.0);
+
+  toplevel = gtk_widget_get_toplevel (widget);
+  if (toplevel && toplevel != widget)
+    return gtk_widget_get_scale_factor (toplevel);
+
+  if (widget->window)
+    return gdk_window_get_scale_factor (widget->window);
+
+  /* else fall back to something that is more likely to be right than
+   * just returning 1.0:
+   */
+  return gdk_screen_get_monitor_scale_factor (gtk_widget_get_screen (widget), 0);
+}
+
 /**
  * gtk_widget_get_display:
  * @widget: a #GtkWidget
diff --git a/gtk/gtkwidget.h b/gtk/gtkwidget.h
index 1fcf21a..f7ebf9b 100644
--- a/gtk/gtkwidget.h
+++ b/gtk/gtkwidget.h
@@ -1055,6 +1055,7 @@ GdkVisual*   gtk_widget_get_visual	(GtkWidget	*widget);
 
 GdkScreen *   gtk_widget_get_screen      (GtkWidget *widget);
 gboolean      gtk_widget_has_screen      (GtkWidget *widget);
+gdouble       gtk_widget_get_scale_factor (GtkWidget *widget);
 GdkDisplay *  gtk_widget_get_display     (GtkWidget *widget);
 GdkWindow *   gtk_widget_get_root_window (GtkWidget *widget);
 GtkSettings*  gtk_widget_get_settings    (GtkWidget *widget);
@@ -1193,6 +1194,11 @@ GdkPixbuf    *gtk_widget_render_icon          (GtkWidget   *widget,
                                                const gchar *stock_id,
                                                GtkIconSize  size,
                                                const gchar *detail);
+GdkPixbuf    *gtk_widget_render_icon_scaled   (GtkWidget      *widget,
+                                               const gchar    *stock_id,
+                                               GtkIconSize     size,
+                                               const gchar    *detail,
+                                               gdouble        *real_scale);
 
 /* handle composite names for GTK_COMPOSITE_CHILD widgets,
  * the returned name is newly allocated.
